// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/bookcenter/bookcenter.proto

package bookcenterv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bookcenter_GetTotalPages_FullMethodName  = "/Bookcenter/GetTotalPages"
	Bookcenter_GetBooksByPage_FullMethodName = "/Bookcenter/GetBooksByPage"
)

// BookcenterClient is the client API for Bookcenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookcenterClient interface {
	GetTotalPages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTotalPagesResponse, error)
	GetBooksByPage(ctx context.Context, in *GetBooksByPageRequest, opts ...grpc.CallOption) (*GetBooksByPageResponse, error)
}

type bookcenterClient struct {
	cc grpc.ClientConnInterface
}

func NewBookcenterClient(cc grpc.ClientConnInterface) BookcenterClient {
	return &bookcenterClient{cc}
}

func (c *bookcenterClient) GetTotalPages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTotalPagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalPagesResponse)
	err := c.cc.Invoke(ctx, Bookcenter_GetTotalPages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookcenterClient) GetBooksByPage(ctx context.Context, in *GetBooksByPageRequest, opts ...grpc.CallOption) (*GetBooksByPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksByPageResponse)
	err := c.cc.Invoke(ctx, Bookcenter_GetBooksByPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookcenterServer is the server API for Bookcenter service.
// All implementations must embed UnimplementedBookcenterServer
// for forward compatibility.
type BookcenterServer interface {
	GetTotalPages(context.Context, *emptypb.Empty) (*GetTotalPagesResponse, error)
	GetBooksByPage(context.Context, *GetBooksByPageRequest) (*GetBooksByPageResponse, error)
	mustEmbedUnimplementedBookcenterServer()
}

// UnimplementedBookcenterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookcenterServer struct{}

func (UnimplementedBookcenterServer) GetTotalPages(context.Context, *emptypb.Empty) (*GetTotalPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalPages not implemented")
}
func (UnimplementedBookcenterServer) GetBooksByPage(context.Context, *GetBooksByPageRequest) (*GetBooksByPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByPage not implemented")
}
func (UnimplementedBookcenterServer) mustEmbedUnimplementedBookcenterServer() {}
func (UnimplementedBookcenterServer) testEmbeddedByValue()                    {}

// UnsafeBookcenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookcenterServer will
// result in compilation errors.
type UnsafeBookcenterServer interface {
	mustEmbedUnimplementedBookcenterServer()
}

func RegisterBookcenterServer(s grpc.ServiceRegistrar, srv BookcenterServer) {
	// If the following call pancis, it indicates UnimplementedBookcenterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bookcenter_ServiceDesc, srv)
}

func _Bookcenter_GetTotalPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookcenterServer).GetTotalPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookcenter_GetTotalPages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookcenterServer).GetTotalPages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookcenter_GetBooksByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookcenterServer).GetBooksByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookcenter_GetBooksByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookcenterServer).GetBooksByPage(ctx, req.(*GetBooksByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookcenter_ServiceDesc is the grpc.ServiceDesc for Bookcenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookcenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bookcenter",
	HandlerType: (*BookcenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalPages",
			Handler:    _Bookcenter_GetTotalPages_Handler,
		},
		{
			MethodName: "GetBooksByPage",
			Handler:    _Bookcenter_GetBooksByPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bookcenter/bookcenter.proto",
}
